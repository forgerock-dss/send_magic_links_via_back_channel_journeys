{
  "meta": {
    "amVersion": "ForgeRock Access Management 8.1.0-SNAPSHOT Build e099d937138a6657792f6a86a6cc1319b782f01c (2025-September-17 22:28)",
    "exportDate": "2025-10-01T11:08:38.288Z",
    "origin": "https://openam<tenant>/am/json/node-designer/node-type/",
    "exportedBy": "Ping PS",
    "resourceVersion": "1.0"
  },
  "nodeTypes": {
    "92e8ad0e3610449890fca904dce9bf3d-1": {
      "serviceName": "92e8ad0e3610449890fca904dce9bf3d",
      "displayName": "Debugger",
      "description": "Display the contents of state onscreen to aid troubleshooting",
      "outcomes": [
        "Next"
      ],
      "outputs": [],
      "inputs": [],
      "script": "/**\n * Prints shared, transient state, object attributes, request parameters, headers and Cookies\n */\n\n/**\n * Node outcomes\n */\nvar nodeOutcomes = {\n    NEXT: \"Next\"\n};\n\n/**\n * Main\n */\n\n(function() {\n    logger.debug(\"node executing\");\n    if (callbacks.isEmpty()) {\n      \n        // nodeState\n        nodeState.keys().toArray().forEach(\n            function(key) {\n                var value = nodeState.get(key);\n                callbacksBuilder.stringAttributeInputCallback(key, \"nodeState.\".concat(key), value, false);\n            }\n        );\n      \n        // objectAttributes\n        var oa = nodeState.getObject(\"objectAttributes\");\n        if (!!oa) {\n            Object.keys(oa).forEach(\n                function(key) {\n                    callbacksBuilder.stringAttributeInputCallback(key, \"objectAttributes.\".concat(key), oa.get(key), false);\n                }\n            );\n        }\n      \n        // Cookies\n        var cookieHeader = requestHeaders.get(\"cookie\");\n        if (!!cookieHeader) {\n        var cookies = cookieHeader.get(0).split(\";\");\n        cookies.forEach(\n            function(key) {\n                var cookieSpec = key.split(\"=\");\n                callbacksBuilder.stringAttributeInputCallback(cookieSpec[0].trim(), \"Cookies.\".concat(cookieSpec[0].trim()), cookieSpec[1].trim(), false);\n            }\n        ); \n        }\n      \n        // requestParameters \n        var requestParamKeys = Object.keys(requestParameters);\n        requestParamKeys.forEach(\n            function(key) {\n                var value = requestParameters.get(key).get(0);\n                callbacksBuilder.stringAttributeInputCallback(key, \"requestParameters.\".concat(key), value, false);\n            }\n        );\n\n        // requestHeaders\n        var requestHeaderKeys = Object.keys(requestHeaders);\n        requestHeaderKeys.forEach(\n            function(key) {\n                var value = requestHeaders.get(key).get(0);\n                callbacksBuilder.stringAttributeInputCallback(key, \"requestHeaders.\".concat(key), value, false);\n            }\n        );\n    } else {\n        action.goTo(nodeOutcomes.NEXT);\n    }\n})();",
      "errorOutcome": false,
      "tags": [
        "debug",
        "nodeState",
        "utilities"
      ],
      "properties": {}
    },
    "c6e6d89db5a74c778ca464ccc38455ca-1": {
      "serviceName": "c6e6d89db5a74c778ca464ccc38455ca",
      "displayName": "Set BackChannel State Properties",
      "description": "This node collect nodeState properties which are then passed down to the back channel journey for consumption",
      "outcomes": [
        "Next"
      ],
      "outputs": [],
      "inputs": [],
      "script": "/**\n * Main function\n */\n\n(function () {\n  logger.error(scriptName + \"Node execution started\");\n\n  //Get node properties\n  var nodeStateProperty = properties.backChannelStateProperty;\n  var attributeList = properties.attributeListProperty;\n\n  //Loop to get and set attributes into the nodeStateProperty nodeState variable\n  var out = {};\n  for (var i = 0; i < attributeList.length; i++) {\n    var k = attributeList[i];\n    var v = nodeState.get(k);\n    if (v !== null && v !== undefined) out[k] = v;\n  }\n  nodeState.putShared(nodeStateProperty, out);\n    logger.error(scriptName + \"Node execution completed\");\n  action.goTo(\"Next\");\n})();",
      "errorOutcome": true,
      "tags": [
        "backChannel",
        "nodeState",
        "utilities"
      ],
      "properties": {
        "attributeListProperty": {
          "title": "Attribute list to set",
          "description": "List of attributes to include in the back channel nodeState object",
          "type": "STRING",
          "required": true,
          "multivalued": true
        },
        "backChannelStateProperty": {
          "title": "Back channel nodeState property",
          "description": "Property name set in nodeState for the back channel journey to consume",
          "type": "STRING",
          "required": true,
          "defaultValue": "backchannel:data",
          "multivalued": false
        }
      }
    },
    "d0a055acaedd486b91fa88eddc6fccdb-1": {
      "serviceName": "d0a055acaedd486b91fa88eddc6fccdb",
      "displayName": "User Message to Display",
      "description": "A node which displays a message to display to the user ",
      "outcomes": [
        "Success"
      ],
      "outputs": [],
      "inputs": [],
      "script": "/**\n * Main function\n */\n\n(function () {\n  logger.error(scriptName + \"Node execution started\");\n\n  if (callbacks.isEmpty()) {\n    var userMessage = properties.message;\n    callbacksBuilder.textOutputCallback(0, userMessage);\n  } else {\n    logger.error(scriptName + \"Node execution completed\");\n    action.goTo(\"Success\");\n  }\n})();",
      "errorOutcome": false,
      "tags": [
        "success",
        "userMessage",
        "utilities"
      ],
      "properties": {
        "message": {
          "title": "Message to display",
          "description": "Message to display to the user",
          "type": "STRING",
          "required": true,
          "multivalued": false
        }
      }
    }
  }
}